{"ast":null,"code":"var _jsxFileName = \"C:\\\\Thinkful\\\\my-code-samples\\\\Module-31-2\\\\src\\\\components\\\\Cards\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Switch, Route, useRouteMatch, useParams } from \"react-router-dom\";\nimport AddCard from \"./AddCard/index\";\nimport EditCard from \"./EditCard/index\";\nimport { readDeck } from \"../../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Cards() {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    deckId\n  } = useParams();\n  const [deck, setDeck] = useState(null);\n  useEffect(() => {\n    async function getDeck() {\n      const response = await readDeck(deckId);\n      setDeck(response);\n    }\n\n    getDeck();\n  }, [deckId]);\n  if (!deck) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/new`,\n        children: /*#__PURE__*/_jsxDEV(AddCard, {\n          deck: deck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${path}/:cardId/edit`,\n        children: /*#__PURE__*/_jsxDEV(EditCard, {\n          deck: deck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cards, \"5q9Z9Ko5XI69RH/eCwCiU4hmJbk=\", false, function () {\n  return [useRouteMatch, useParams];\n});\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["C:/Thinkful/my-code-samples/Module-31-2/src/components/Cards/index.js"],"names":["React","useState","useEffect","Switch","Route","useRouteMatch","useParams","AddCard","EditCard","readDeck","Cards","path","deckId","deck","setDeck","getDeck","response"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,aAAvB,EAAsCC,SAAtC,QAAsD,kBAAtD;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM;AAACC,IAAAA;AAAD,MAASN,aAAa,EAA5B;AACA,QAAM;AAACO,IAAAA;AAAD,MAAWN,SAAS,EAA1B;AAEA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,OAAf,GAAyB;AACvB,YAAMC,QAAQ,GAAG,MAAMP,QAAQ,CAACG,MAAD,CAA/B;AACAE,MAAAA,OAAO,CAACE,QAAD,CAAP;AACD;;AACDD,IAAAA,OAAO;AACR,GANQ,EAMN,CAACH,MAAD,CANM,CAAT;AAQA,MAAI,CAACC,IAAL,EAAW,OAAO,IAAP;AACX,sBACE;AAAA,2BACE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAEF,IAAK,MAA3B;AAAA,+BACE,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEE;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAEF,IAAK,eAArB;AAAA,+BACE,QAAC,QAAD;AAAU,UAAA,IAAI,EAAEE;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAYD;;GA3BQH,K;UACQL,a,EACEC,S;;;KAFVI,K;AA6BT,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {Switch, Route, useRouteMatch, useParams} from \"react-router-dom\";\r\nimport AddCard from \"./AddCard/index\";\r\nimport EditCard from \"./EditCard/index\";\r\nimport { readDeck } from \"../../utils/api\";\r\n\r\nfunction Cards() {\r\n  const {path} = useRouteMatch();\r\n  const {deckId} = useParams();\r\n\r\n  const [deck, setDeck] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function getDeck() {\r\n      const response = await readDeck(deckId);\r\n      setDeck(response);\r\n    }\r\n    getDeck(); \r\n  }, [deckId])\r\n\r\n  if (!deck) return null;\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route exact path={`${path}/new`}>\r\n          <AddCard deck={deck} />\r\n        </Route>\r\n        <Route path={`${path}/:cardId/edit`}>\r\n          <EditCard deck={deck} />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Cards;"]},"metadata":{},"sourceType":"module"}